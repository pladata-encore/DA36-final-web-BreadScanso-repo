document.addEventListener('DOMContentLoaded', function() {
    // ÌéòÏù¥ÏßÄ Î°úÎìúÏãú ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄ Ï¥àÍ∏∞Ìôî
    sessionStorage.removeItem("productDictionary");
    sessionStorage.removeItem("totalQuantity");
    sessionStorage.removeItem("totalAmount");
    sessionStorage.removeItem("usedPoints");
    sessionStorage.removeItem("finalAmount");
    sessionStorage.removeItem("earnedPoints");
    sessionStorage.removeItem("phone_num");
    sessionStorage.removeItem("points");
    sessionStorage.removeItem("finalPoints");
    console.log('ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');

// ÏõπÏ∫† ÏÑ§Ï†ï
    const video = document.getElementById("webcam");
    const captureBtn = document.getElementById("capture-btn");
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
// ngrok(ÌÑ∞ÎÑêÎßÅ ÏÑúÎπÑÏä§) url ÏÑ§Ï†ï
    const NGROK_URL = "https://de58-175-121-129-72.ngrok-free.app/predict/";

    let productDictionary = {};

// ÌïúÍ∏ÄÎ™Ö Îß§Ìïë Ìï®Ïàò
    function getKoreanName(engName) {
        const nameMapping = {
            "bagel": "Î≤†Ïù¥Í∏Ä",
            "croissant": "ÌÅ¨Î£®ÏïÑÏÉÅ",
            "whitebread": "ÏãùÎπµ",
            "redbeanbread": "Îã®Ìå•Îπµ",
            "pizzabread": "ÌîºÏûêÎπµ",
            "saltbread": "ÏÜåÍ∏àÎπµ",
            "custardcreambread": "ÏäàÌÅ¨Î¶ºÎπµ",
            "soboro": "ÏÜåÎ≥¥Î°ú"
        };
        return nameMapping[engName] || engName;
    }

// ÏõπÏ∫† ÏãúÏûë
    async function startWebcam() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({video: true});
            video.srcObject = stream;
        } catch (error) {
            console.error("üö® ÏõπÏ∫† Ï†ëÍ∑º Ïã§Ìå®:", error);
            alert("ÏõπÏ∫†ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.");
        }
    }

// Î¶¨ÏÖã Î≤ÑÌäº Ïù¥Î≤§Ìä∏
    document.getElementById('reset-order-btn').addEventListener('click', function () {
// Ï£ºÎ¨∏ ÌÖåÏù¥Î∏î ÎπÑÏö∞Í∏∞
        document.getElementById('order-table').innerHTML = '';
// Ï¥ù ÏàòÎüâÍ≥º Ï¥ù Í∏àÏï° Ï¥àÍ∏∞Ìôî
        document.getElementById('totalQuantity').textContent = '0Í∞ú';
        document.getElementById('totalAmount').textContent = '0Ïõê';
// Ï†úÌíà ÎîïÏÖîÎÑàÎ¶¨ Ï¥àÍ∏∞Ìôî
        productDictionary = {};
// ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄ Ï¥àÍ∏∞Ìôî
        sessionStorage.removeItem("productDictionary");
        sessionStorage.removeItem("totalQuantity");
        sessionStorage.removeItem("totalAmount");
    });

// ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    function updateOrderTable() {
        const orderTable = document.getElementById("order-table");
        const totalQuantityElement = document.getElementById("totalQuantity");
        const totalAmountElement = document.getElementById("totalAmount");
        // ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî
        orderTable.innerHTML = "";
        let totalQuantity = 0;
        let totalAmount = 0;

        Object.keys(productDictionary).forEach(itemName => {
            const product = productDictionary[itemName];
            totalQuantity += product.quantity;
            totalAmount += product.totalPrice;
            const row = `
            <tr>
                <td>${product.korName}</td>
                <td>${product.price.toLocaleString()}Ïõê</td>
                <td>${product.quantity}</td>
                <td>${product.totalPrice.toLocaleString()}Ïõê</td>
            </tr>
        `;
            orderTable.innerHTML += row;
        });
        // ÎîîÎ≤ÑÍπÖ
        console.log("totalQuantity", totalQuantity);
        // Ï¥ù ÏàòÎüâÍ≥º Í∏àÏï° ÏóÖÎç∞Ïù¥Ìä∏
        totalQuantityElement.innerHTML = `${totalQuantity}Í∞ú`;
        totalAmountElement.innerHTML = `${totalAmount.toLocaleString()}Ïõê`;
        console.log("SAdjhgjhgjha",productDictionary);
        // ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        sessionStorage.setItem("productDictionary", JSON.stringify(productDictionary));
        sessionStorage.setItem("totalQuantity", totalQuantity);
        sessionStorage.setItem("totalAmount", totalAmount.toString());

    }

// Ï¥¨ÏòÅ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
    captureBtn.addEventListener("click", async () => {
        captureBtn.disabled = true;
        captureBtn.textContent = "üîÑ Ï∂îÎ°† Ï§ë...";

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        const imageData = canvas.toDataURL("image/jpeg");

        try {
            const response = await fetch(NGROK_URL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: JSON.stringify({image: imageData}),
                mode: "cors"
            });

            const responseText = await response.text();
            if (!responseText) throw new Error("Îπà ÏùëÎãµÏù¥ ÏôîÏäµÎãàÎã§");

            const results = JSON.parse(responseText);
            console.log("üìå Ï∂îÎ°† Í≤∞Í≥º:", results);

// ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞Î•º ÌÖåÏù¥Î∏îÏóê Ï∂îÍ∞Ä (Í≤∞Í≥º Ï≤òÎ¶¨ Î∂ÄÎ∂Ñ)
results.forEach(result => {
    if (result?.name && result?.confidence) {
        const engName = result.name;
        const korName = getKoreanName(engName);
        const price = menu_data[engName]?.price || 0;
        const item_id = menu_data[engName]?.item_id || null; // item_id Ï∂îÍ∞Ä
    console.log("llllllllkkkkkkkkll",engName);
        if (productDictionary[engName]) {
            productDictionary[engName].quantity += 1;
            productDictionary[engName].totalPrice =
                productDictionary[engName].quantity * productDictionary[engName].price;
        } else {
            productDictionary[engName] = {
                korName: korName,
                price: price,
                quantity: 1,
                totalPrice: price,
                item_id: item_id // item_id Ï†ÄÏû•
            };
        }
    }
});

            // ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏
            updateOrderTable();

        } catch (error) {
            console.error("üö® ÏóêÎü¨:", error);
        } finally {
            captureBtn.disabled = false;
            captureBtn.textContent = "üì∏ Ï¥¨ÏòÅ";
        }
    });

    startWebcam();
});